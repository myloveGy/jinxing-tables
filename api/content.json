{
    "code": 10000,
    "data": {
        "config": "配置说明\n=======\n\n[TOC]\n\n>目前配置选择器都只能使用ID选择器\n\n| 配置名称 | 字段类型 | 默认值 | 说明 |\n|----------------|---------|-------------------|---------|\n| title          | string  | 空字符串           |  表格标题(会在编辑和新增弹框显示)      |\n| pk             | string  | id                | 数据主键值(行内编辑,和多个删除需要使用) |\n| modalSelector  | string  | #table-modal      | 弹出模块框的选择器                    |\n| formSelector   | string  | #edit-form        | 编辑表单的选择器                      |\n| defaultFilters | object  | null              | 默认查询条件(该配置在查询和导出都会提交给服务器)|\n| filters        | string  | filters           | 查询条件提交给服务器字段名称                  | \n\n## 请求相关配置\n| 配置名称 | 字段类型 | 默认值 | 说明 |\n|----------------|---------|-------------------|---------|\n| isSuccess      | function | function(response) { return response.code === 0 } | 验证请求是否成功(response 为响应json 数据)\n| getMessage     | function | function(response) { return response.msg; }       | 获取响应的提示信息(response 为响应 json 数据)\n| urlPrefix      | string   | 空字符串    | 路由前缀     |\n| urlSuffix      | string   | 空字符串    | 路由后缀     |\n| url            | object   |            | 具体路由信息  |\n| url.search     | string   | search     | 搜索&列表显示数据请求地址 |\n| url.create     | string   | create     | 新增数据请求地址         |\n| url.update     | string   | update     | 编辑数据请求地址         |\n| url.delete     | string   | delete     | 删除数据请求地址         |\n| url.export     | string   | export     | 导出数据请求地址         |\n| url.editable   | string   | editable   | 行内编辑请求地址         |\n| url.deleteAll  | string   | delete-all | 多删除请求地址           |\n\n请求数据说明\n\n* 新增请求数据和修改请求数据一致(就是表单中声明的字段的数据),*主键值新增和编辑的时候，请将表单编辑字段设置为隐藏字段，编辑的时候会根据表格中的数据复赋值上去*\n> 需要注意的是新增的时候，表单中的隐藏字段也会提交上去,多余字段，需要后端服务器自行处理\n\n* 查询请求数据：表单搜索数据 + 分页数据 + 默认查询数据 具体字段[查看](.\/#关于搜索条件和排序字段的处理)  \n* 删除请求数据：就是删除该行的所有数据\n* 导出请求数据：表单搜索数据 + 默认查询数据 + 导出字段信息 + 标题数据\n\n| 字段名称 | 数据类型 | 说明|\n|---------|----------|-------|\n| title   | string   | 就是配置的title                                              |\n| columns | array    | 导出字段信息(表格 columns 中配置了 export: false 字段不在其中)  |\n| filters | array    | 查询条件信息和默认查询信息都在其中                              |\n\n* 行内编辑请求数据： pk + name + value\n\n| 字段名称 | 数据类型 | 说明|\n|---------|----------|-------|\n| pk   | mixed  | 该行主键值    |                                          \n| name | string | 修改字段名称  |\n| value| string | 修改后的值    |\n\n## 默认dataTables 的配置信息\n\n>关于dataTables 的配置都配置在table 这个配置项中(允许覆盖追加配置)\n\n| 配置名称 | 配置类型 | 配置值 | 配置说明 |\n|---------|---------|---------|---------|\n| table.paging     | bool  | true               | 是否使用分页      |\n| table.lengthMenu | array | [10, 30, 50, 100]  | 下拉选择分页数    |\n| table.searching  | bool  | false              | 是否允许快速搜索  |\n| table.ordering   | bool  | true               | 是否允许排序      |\n| table.info       | bool  | true               |                  |\n| table.autoWidth  | bool  | false              | 自动计算宽度      |\n| table.processing | bool  | true               |                 |\n| table.serverSide | bool  | true               | 是否服务器处理    |\n| table.paginationType | string | full_numbers  | 分页风格          |\n| table.language    | object |                  | 使用语言，默认中文 |\n\n例子：\n```\n{\n   table: {\n       paging: true,\n       lengthMenu: [10, 30, 50, 100],\n       searching: false,\n       ordering: true,\n       info: true,\n       autoWidth: false,\n       processing: true,\n       serverSide: true,\n       paginationType: \"full_numbers\",\n       language: $.getValue(MeTables.language, \"dataTables\"),\n   } \n}\n```      \n\n## 搜索表单相关配置\n>会根据 **table.columns** 中 **search** 配置选项生成搜索表单信息\n\n| 配置说明 | 配置类型 | 配置值 | 配置说明 |\n|----------|-------|---------|--------|\n| searchHtml | string | 空字符串      | 搜索表单内容(根据配置生成的html都追加到该字符串上面)|\n| searchType | string | middle       | 搜索表单位置(支持middle,top 选项)                |\n| searchForm | string | #search-form | 搜索表单选择器(目前只支持id选择器)                |         \n| searchInputEvent | string | blur   | 搜索表单input触发事件类型自动触发搜索(不需要为空)             |\n| searchSelectEvent| string | change | 搜索表单select触发事件类型自动触发搜索(不需要为空            |\n| search.render | bool   | true      | 是否需要渲染(自己写的搜索表单的话，需要设置为false) |\n| search.type   | string | append    | 搜索表单searchHtml 怎么追加到表单中 |\n| search.button | object | {class: \"btn btn-info btn-sm\", icon: \"ace-icon fa fa-search\"} | 搜索按钮配置\n\nsearch 配置需要在 searchType 不为 middle 才会生效\n\n## 编辑表单配置选项\n\n| 配置名称 | 配置类型 | 配置值 | 配置说明 |\n|---------|----------|------|---------|\n| form.method               | string | post                 | 提交类型 |\n| form.class                | string | form-horizontal      | 类名     |\n| form.name                 | string | edit-form            | 表单名称  |\n| formValidate              | object | 默认配置如下说明信息   | 表单验证默认配置信息|\n| editFormParams.multiCols  | bool   | false                | 是否允许多列排列 |\n| editFormParams.colsLength | int    | 1                    | 需要几列 |\n| editFormParams.cols       | array  | [3, 9]               | 多列布局，label 和 input 布局分隔 |\n| editFormParams.modalClass | string | 空字符串              | 弹出模态框的类名(多列后，没有配置modalClass 的话，默认使用大模态框)                  |\n\n说明信息：\n* form 的配置就是[HTML form](http:\/\/www.w3school.com.cn\/tags\/tag_form.asp) 允许设置的标签属性信息\n* 默认表单验证配置信息如下就是[jquery.validate](https:\/\/jqueryvalidation.org\/documentation\/) 的配置信息：\n```\n{\n    formValidate: {\n        errorElement: 'div',\n        errorClass: 'help-block',\n        focusInvalid: false,\n        highlight: function (e) {\n            $(e).closest('.form-group').removeClass('has-info').addClass('has-error');\n        },\n        success: function (e) {\n            $(e).closest('.form-group').removeClass('has-error');\/\/.addClass('has-info');\n            $(e).remove();\n        }\n    }\n}\n```\n\n## 查看详情配置说明\n\n| 配置名称 | 配置类型 | 配置值  | 配置说明 |\n|---------|---------|--------|---------|\n| viewFull               | bool   | false     | 是否弹出就全屏                         | \n| viewConfig             | object | 如下说明   | 就是layer 弹层的配置              |\n| detailTable.multiCols  | bool   | false     | 是否允许多列排列                    |\n| detailTable.colsLength | int    | 1         | 需要几列                            |\n| detailTable.cols       | array  | [3, 9]    | 多列布局，label 和 input 布局分隔     |\n\n* viewConfig 默认配置([layer弹层]()):\n```\n{\n    viewConfig: {\n        type: 1,\n        shade: 0.3,\n        shadeClose: true,\n        maxmin: true,\n        area: ['50%', 'auto']\n    }\n}\n``` \n## 关于按钮组配置说明\n\n| 配置名称 | 配置类型 | 配置值 | 配置说明 |\n|---------|----------|------|---------|\n| buttonHtml     | string | 空字符串          | 按钮组默认html 内容，配置的按钮都会追加到该html 后面|\n| buttonSelector | string | #me-table-buttons| 容纳按钮组html 容器的选择器     |\n| buttonType     | string | append           | html 怎么追加到容器里面         |\n| buttons        | object |               | 按钮组配置                     |\n| buttons.text   | string |                | 按钮里面文本信息               |\n| buttons.icon   | string |                | 使用的图标信息                  |\n| buttons.class  | string |                | 按钮的class 信息               |\n\n默认按钮组有5个，分别是:\n1. 新增(create)\n2. 修改(updateAll)\n3. 删除多个(deleteAll)\n4. 刷新(refresh)\n5. 导出(export)\n\n使用例子(添加自定义按钮和关闭已经存在的按钮)：\n```\n$(\"#table\").MeTables({\n    buttons: {\n        \/\/ 关闭之前存在按钮\n        create: null,\n        \n        updateAll: null,\n        \n        \/\/ 自定义添加按钮\n        other: {\n            text: \"其他按钮\",\n            icon: \"fa fa-list\",\n            class: \"btn btn-success other-class\"\n        },\n        \n        test: {\n            text: \"测试按钮\",\n            icon: \"fa fa-users\",\n            class: \"btn btn-info test-class\"\n        }\n    }\n});\n\n\/\/ 自定义按钮需要自己监听点击事件\n$(document).on(\"click\", \"button.other-class\", function () {\n    alert(\"点击了其他按钮\");\n});\n```\n\n## 三个自定义 columns 列的信息\n>其实就是默认定义了table.columns 中配置信息，columns 的配置都可以追加和覆盖到默认配置中\n\n**不需要直接配置为null或者false**\n列如：\n```\n$(\"#table\").MeTables({\n    checkbox: null,\n    number: null\n});\n```\n### 1.多选按钮 checkbox\n配置信息：\n```\n{\n    checkbox: {\n        data: null,\n        sortable: false,\n        class: \"center text-center\",\n        title: \"<label class=\\\"position-relative\\\">\" +\n        \"<input type=\\\"checkbox\\\" class=\\\"ace\\\" \/><span class=\\\"lbl\\\"><\/span><\/label>\",\n        view: false,\n        createdCell: function (td, data, array, row) {\n            $(td).html('<label class=\"position-relative\">' +\n            '<input type=\"checkbox\" class=\"ace\" data-row=\"' + row + '\" \/>' +\n            '<span class=\"lbl\"><\/span>' +\n            '<\/label>');\n        }\n    }\n}\n```\n### 2.序号 number\n```\n{\n    number: {\n        title: $.getValue(MeTables.language, \"meTables.number\"),\n        data: null,\n        view: false,\n        render: function (data, type, row, meta) {\n            if (!meta || $.isEmptyObject(meta)) {\n                return false;\n            }\n        \n            return meta.row + 1 + meta.settings._iDisplayStart;\n        },\n        sortable: false\n    }\n}\n```\n### 3.操作按钮 operations \n```\n{\n    operations: {\n        width: \"120px\",\n        defaultContent: \"\",\n        title: $.getValue(MeTables.language, \"meTables.operations\"),\n        sortable: false,\n        data: null,\n        buttons: {\n            see: {\n                title: $.getValue(MeTables.language, \"meTables.see\"),\n                btnClass: \"btn-success\",\n                operationClass: \"me-table-detail\",\n                icon: \"fa-search-plus\",\n                colorClass: \"blue\"\n            },\n            update: {\n                title: $.getValue(MeTables.language, \"meTables.update\"),\n                btnClass: \"btn-info\",\n                operationClass: \"me-table-update\",\n                icon: \"fa-pencil-square-o\",\n                colorClass: \"green\"\n            },\n            delete: {\n                title: $.getValue(MeTables.language, \"meTables.delete\"),\n                btnClass: \"btn-danger\",\n                operationClass: \"me-table-delete\",\n                icon: \"fa-trash-o\",\n                colorClass: \"red\"\n            }\n        }\n    }\n}\n```\n\n#### operations 中 buttons 配置说明\n| 配置名称 | 配置类型  | 配置说明 |\n|---------------|----------|------------ |\n| title         | string   | button 名称     |\n| btnClass      | string   | button class信息|\n| operationClass| string   | 操作的class 信息(事件监听使用这个字段信息)\n| icon          | string   | 使用的icon      |\n| colorClass    | string   | 颜色class 信息  |\n\n自定义了三个按钮：\n1. 查看详情(see)\n2. 编辑信息(update)\n3. 删除数据(delete)\n\n自定义添加和关闭operations buttons 的配置例子：\n```\nvar m = $(\"#table\").MeTables({\n    operations: {\n        buttons: {\n            \/\/ 关闭之前的按钮\n            see: null,\n            \n            \/\/ 添加自定义的按钮\n            other: {\n                title: \"其他信息\",\n                btnClass: \"btn-warning\",\n                operationClass: \"me-table-other\",\n                icon: \"fa fa-user\",\n                colorClass: \"red\"\n            }\n        }\n    }\n});\n\n\/\/ 需要自己监听事件信息(注意,监听的类名需要加上 - 表格选择器去掉 #和.号的字符串)\n\/\/ 这里选择器为 #table 去掉 #和.号后为 table, operationClass 为 me-table-other 那么监听的对象为 .me-table-other-table\n$(document).on(\"click\", \".me-table-other-table\", function () {\n    \/\/ 当前点击按钮所在的行\n    var row = $(this).data(\"row\");\n    \n    \/\/ 获取当前行的所有数据信息\n    var data = m.table.data()[row];\n    \n    \/\/ 自定义处理逻辑\n    console.info(data);\n    \/\/ ... \n});\n```\n>需要自己监听事件信息(注意,监听的类名需要加上 - 表格选择器去掉 #和.号的字符串)\n这里选择器为 #table 去掉 #和.号后为 table, operationClass 为 me-table-other 那么监听的对象为 **.me-table-other-table*\n\n## 所有默认配置\n```\n    \/\/  默认配置信息\n    MeTables.defaults = {\n        title: \"\",                      \/\/ 表格的标题\n        pk: \"id\",\t\t                \/\/ 行内编辑pk索引值\n        modalSelector: \"#table-modal\",  \/\/ 编辑Modal选择器\n        formSelector: \"#edit-form\",\t    \/\/ 编辑表单选择器\n        defaultFilters: null,\t\t\t\/\/ 默认查询条件 {id: 1, type: 2}\n        filters: \"filters\",             \/\/ 查询参数名称\n\n        \/\/ 请求相关\n        isSuccess: function (json) {\n            return json.code === 0;\n        },\n\n        getMessage: function (json) {\n            return json.msg;\n        },\n\n        \/\/ 搜索相关\n        searchHtml: \"\",\t\t\t\t    \/\/ 搜索信息额外HTML\n        searchType: \"middle\",\t\t    \/\/ 搜索表单位置\n        searchForm: \"#search-form\",\t    \/\/ 搜索表单选择器\n        searchInputEvent: \"blur\",       \/\/ 搜索表单input事件\n        searchSelectEvent: \"change\",    \/\/ 搜索表单select事件\n        \/\/ 搜索信息(只对searchType !== \"middle\") 情况\n        search: {\n            render: true,\n            type: \"append\",\n            button: {\n                \"class\": \"btn btn-info btn-sm\",\n                \"icon\": \"ace-icon fa fa-search\"\n            }\n        },\n\n        fileSelector: [],\t\t\t\/\/ 上传文件选择器\n\n        \/\/ 编辑表单信息\n        form: {\n            \"method\": \"post\",\n            \"class\": \"form-horizontal\",\n            \"name\": \"edit-form\"\n        },\n\n        \/\/ 编辑表单验证方式\n        formValidate: {\n            errorElement: 'div',\n            errorClass: 'help-block',\n            focusInvalid: false,\n            highlight: function (e) {\n                $(e).closest('.form-group').removeClass('has-info').addClass('has-error');\n            },\n            success: function (e) {\n                $(e).closest('.form-group').removeClass('has-error');\/\/.addClass('has-info');\n                $(e).remove();\n            }\n        },\n\n        \/\/ 表单编辑其他信息\n        editFormParams: {\t\t\t\/\/ 编辑表单配置\n            multiCols: false,       \/\/ 是否多列\n            colsLength: 1,          \/\/ 几列\n            cols: [3, 9],           \/\/ label 和 input 栅格化设置\n            modalClass: \"\",\t\t\t\/\/ 弹出模块框配置\n            modalDialogClass: \"\"\t\/\/ 弹出模块的class\n        },\n\n        \/\/ 关于详情的配置\n        viewFull: false, \/\/ 详情打开的方式 1 2 打开全屏\n        viewConfig: {\n            type: 1,\n            shade: 0.3,\n            shadeClose: true,\n            maxmin: true,\n            area: ['50%', 'auto']\n        },\n\n        detailTable: {                   \/\/ 查看详情配置信息\n            multiCols: false,\n            colsLength: 1\n        },\n\n        \/\/ 关于地址配置信息\n        urlPrefix: \"\",\n        urlSuffix: \"\",\n        url: {\n            search: \"search\",\n            create: \"create\",\n            update: \"update\",\n            delete: \"delete\",\n            export: \"export\",\n            upload: \"upload\",\n            editable: \"editable\",\n            deleteAll: \"delete-all\"\n        },\n\n        \/\/ dataTables 表格默认配置对象信息\n        table: {\n            paging: true,\n            lengthMenu: [10, 30, 50, 100],\n            searching: false,\n            ordering: true,\n            info: true,\n            autoWidth: false,\n            processing: true,\n            serverSide: true,\n            paginationType: \"full_numbers\",\n            language: $.getValue(MeTables.language, \"dataTables\"),\n        },\n\n        \/\/ 开启行处理\n        editable: null,\n        editableMode: \"inline\",\n\n        \/\/ 默认按钮信息\n        buttonHtml: \"\",\n        \/\/ 按钮添加容器\n        buttonSelector: \"#me-table-buttons\",\n        \/\/ 按钮添加方式\n        buttonType: \"append\",\n        \/\/ 默认按钮信息\n        buttons: {\n            create: {\n                icon: \"ace-icon fa fa-plus-circle blue\",\n                class: \"btn btn-white btn-primary btn-bold\"\n            },\n            updateAll: {\n                icon: \"ace-icon fa fa-pencil-square-o orange\",\n                class: \"btn btn-white btn-info btn-bold\"\n            },\n            deleteAll: {\n                icon: \"ace-icon fa fa-trash-o red\",\n                class: \"btn btn-white btn-danger btn-bold\"\n            },\n            refresh: {\n                func: \"search\",\n                icon: \"ace-icon fa  fa-refresh\",\n                class: \"btn btn-white btn-success btn-bold\"\n            },\n            export: {\n                icon: \"ace-icon glyphicon glyphicon-export\",\n                class: \"btn btn-white btn-warning btn-bold\"\n            }\n        }\n\n        \/\/ 需要序号\n        , number: {\n            title: $.getValue(MeTables.language, \"meTables.number\"),\n            data: null,\n            view: false,\n            render: function (data, type, row, meta) {\n                if (!meta || $.isEmptyObject(meta)) {\n                    return false;\n                }\n\n                return meta.row + 1 + meta.settings._iDisplayStart;\n            },\n            sortable: false\n        }\n\n        \/\/ 需要多选框\n        , checkbox: {\n            data: null,\n            sortable: false,\n            class: \"center text-center\",\n            title: \"<label class=\\\"position-relative\\\">\" +\n                \"<input type=\\\"checkbox\\\" class=\\\"ace\\\" \/><span class=\\\"lbl\\\"><\/span><\/label>\",\n            view: false,\n            createdCell: function (td, data, array, row) {\n                $(td).html('<label class=\"position-relative\">' +\n                    '<input type=\"checkbox\" class=\"ace\" data-row=\"' + row + '\" \/>' +\n                    '<span class=\"lbl\"><\/span>' +\n                    '<\/label>');\n            }\n        }\n        \/\/ 操作选项\n        , operations: {\n            width: \"120px\",\n            defaultContent: \"\",\n            title: $.getValue(MeTables.language, \"meTables.operations\"),\n            sortable: false,\n            data: null,\n            buttons: {\n                see: {\n                    title: $.getValue(MeTables.language, \"meTables.see\"),\n                    btnClass: \"btn-success\",\n                    operationClass: \"me-table-detail\",\n                    icon: \"fa-search-plus\",\n                    colorClass: \"blue\"\n                },\n                update: {\n                    title: $.getValue(MeTables.language, \"meTables.update\"),\n                    btnClass: \"btn-info\",\n                    operationClass: \"me-table-update\",\n                    icon: \"fa-pencil-square-o\",\n                    colorClass: \"green\"\n                },\n                delete: {\n                    title: $.getValue(MeTables.language, \"meTables.delete\"),\n                    btnClass: \"btn-danger\",\n                    operationClass: \"me-table-delete\",\n                    icon: \"fa-trash-o\",\n                    colorClass: \"red\"\n                }\n            }\n        },\n        version: \"1.0.0\",\n        author: {\n            name: \"liujinxing\",\n            email: \"jinxing.liu@qq.com\",\n            github: \"https:\/\/github.com\/myloveGy\"\n        }\n    };\n```\n\n全局默认配置修改\n```\n    \/\/ 修改默认配置\n    $.fn.meTables.defaults.table.dom = \"t<'row'<'table-page col-sm-4'li><'col-sm-8'p>>\";\n    $.fn.meTables.defaults.url.create = 'store';\n    $.fn.meTables.defaults.url.delete = 'destroy';\n    $.fn.meTables.defaults.number = null;\n    $.fn.meTables.defaults.checkbox = null;\n```\n全局添加自定义表单编辑信息\n```\n$.extend($.fn.meTables, {\n    \/**\n     * 多选\n     * @param params\n     * @param d\n     * @returns {string}\n     *\/\n    checkboxCreate: function (params, d) {\n        html = '';\n        if (d && this.isObject(d)) {\n            var o = params.all;\n            delete params.all;\n            delete params.divClass;\n            params[\"class\"] = \"ace m-checkbox\";\n            params = this.handleParams(params);\n            if (o) {\n                html += '<div class=\"checkbox\">' +\n                    '<label>' +\n                    '<input type=\"checkbox\" class=\"ace checkbox-all\" onclick=\"var isChecked = $(this).prop(\\'checked\\');$(this).parent().parent().parent().find(\\'input[type=checkbox]\\').prop(\\'checked\\', isChecked);\" \/>' +\n                    '<span class=\"lbl\"> ' + meTables.fn.getLanguage(\"sSelectAll\") + ' <\/span>' +\n                    '<\/label>' +\n                    '<\/div>';\n            }\n            for (i in d) {\n                html += '<div class=\"checkbox\">' +\n                    '<label>' +\n                    '<input type=\"checkbox\" ' + params + ' value=\"' + i + '\" \/>' +\n                    '<span class=\"lbl\"> ' + d[i] + ' <\/span>' +\n                    '<\/label>' +\n                    '<\/div>';\n            }\n        }\n\n        return html;\n    }\n});\n```",
        "home": "meTables.js 基于 jquery.dataTables.js 表格\n===================================\n\n### 简介\n\n因为jquery.dataTables.js 只是显示数据，没有自带的编辑、新增、删除数据的功能，需要依靠扩展实现，所以自己写了一个编辑、新增、删除数据的功能\n\n### 依赖声明\n* jQuery v2.1.1 \n* Bootstrap v3.2.0\n* DataTables 1.10.15\n* layer-v2.1\n* jQuery Validation Plugin - v1.14.0\n\n### 简单使用\n\n#### html\n```html\n<!-- 按钮信息 -->\n<p id=\"me-table-buttons\"><\/p>\n\n<!-- 表格数据 -->\n<table class=\"table table-striped table-bordered table-hover\" id=\"show-table\"><\/table>\n\n<script>\n\/**\n * 简单配置说明\n * title 配置表格名称\n * table DataTables 的配置 \n * --- columns 中的 value, search, edit, defaultOrder, hide, view, export 是 MeTables 的配置\n * ------ value 为编辑表单radio、select, checkbox， 搜索的表单的select 提供数据源,格式为一个对象 {\"值\": \"显示信息\"}\n * ------ search 搜索表单配置(不配置不会生成查询表单), type 类型支持 text, select 其他可以自行扩展\n * ------ edit 编辑表单配置（不配置不会生成编辑表单）, \n * --------- type 类型支持hidden, text, password, file, radio, select, checkbox, textarea 等等 \n * --------- meTables.inputCreate 等后缀函数为其生成表单元素，可以自行扩展\n * --------- 除了表单元素自带属性，比如 required: true, number: true 等为 jquery.validate.js 的验证配置\n * --------- 最终生成表单元素 <input name=\"name\" required=\"true\" number=\"true\" \/>\n * ------ defaultOrder 设置默认排序的方式(有\"ace\", \"desc\")\n * ------ hide 该列是否需要隐藏 true 隐藏\n * 其他配置查看 MeTables 配置\n *\/\n\n\/\/ 自定义表单处理方式\n$.extend($.fn.meTables, {\n    \/**\n     * 定义编辑表单(函数后缀名Create)\n     * 使用配置 edit: {\"type\": \"email\", \"id\": \"user-email\"}\n     * edit 里面配置的信息都通过 params 传递给函数\n     *\/\n    \"emailCreate\": function(params) {\n        return '<input type=\"email\" name=\"' + params.name + '\"\/>';\n    },\n    \n    \/**\n     * 定义搜索表达(函数后缀名SearchCreate)\n     * 使用配置 search: {\"type\": \"email\", \"id\": \"search-email\"}\n     * search 里面配置的信息都通过 params 传递给函数\n     *\/\n    \"emailSearchCreate\": function(params) {\n        return '<input type=\"text\" name=\"' + params.name +'\">';\n    }\n});\n\n\nvar m = $(\"#show-table\").MeTables({\n    title: \"地址信息\",\n    table: {\n        columns:[\n            {\n                title: \"id\", \n                data: \"id\", \n                defaultOrder: \"desc\",\n                \/\/ type 类型默认为text,可以不写\n                edit: {required: true, number: true}\n            },\n            {\n                title: \"地址名称\", \n                data: \"name\", \n                edit: {required: true, rangelength: \"[2, 40]\"},\n                search: {type: \"text\"},\n                sortable: false\n            },\n            {\n                title: \"父类ID\", \n                data: \"pid\", \n                value: {\"0\": \"中国\", \"1\": \"上海\"},\n                edit: {required: true, number: true},\n                search: {\"type\":\"select\"}\n            }\n        ]\n    }\n});\n\n<\/script>\n```\n\n#### 生成视图\n![试图文件](https:\/\/mylovegy.github.io\/jinxing-tables\/docs\/images\/data.png)\n",
        "service": "服务端处理说明\n============\n\n[TOC]\n\n## 关于搜索条件和排序字段的处理\n\n搜索表单的查询信息以及排序条件都会拼接到dataTables 提交数据中\n\n>请求参数说明(请求方式为get)\n\n| 名称     |  类型 | 说明|\n|:--------|:------|:----|\n|draw     | int   | 请求次数|\n|offset   | int   | 分页偏移量(对应mysql 的 offset)|\n|limit    | int   | 分页数据条数( 对应mysql 的 limit)|\n|columns  | array | 表格的字段信息(data 为 null 忽略)|\n|filters  | array | 查询的参数信息,定义了defaultFilters 数据也在里面|\n|orderBy  | string| 排序条件(排序字段 排序方式： id asc)|\n\n## 服务器数据的处理(PHP代码)\n\n```php\n\/\/ 默认使用get 请求参数\n\n\/\/ 请求次数\n$draw = isset($_GET['draw']) ? (int)$_GET['draw'] : 0;\n\n\/\/ 查询参数(查询条件排序字段)\n$filters = isset($_GET['filters']) ? $_GET['filters'] : [];\n\n\/\/ 查询开始位置(分页启始位置)\n$offset = isset($_GET['offset']) ? (int)$_GET['offset'] : 0; \n\n\/\/ 查询数据条数\n$limit = isset($_GET['limit']) ? (int)$_GET['limit'] : 10;\n\n\/\/ 排序的字段和方式\n$orderBy = isset($_GET['orderBy']) ? trim($_GET['orderBy']) : 'id desc';\n\n\/\/ 处理查询条件\nif (!empty($filters)) {\n    \/**\n     * 这里的 $filters 其实就是前台搜索表单中的数据(查询字段对应值的一个数组)\n     * ['id' => '1', 'name' => '湖南']\n     *\/\n     \n    $arrWhere = $bindParams = [];\n    foreach ($filter as $key => $value) {\n        \/\/ 具体对应查询条件根据实际情况处理，我这里使用最简单的处理方式('=')\n        $arrWhere[]   = '`'.$key.'` = ?';\n        $bindParams[] = trim($value);\n    }\n     \n    $where = ' WHERE ' . implode(' AND ', $arrWhere);\n} else {\n    $where      = '';\n    $bindParams = [];\n}\n\n\/\/ 实例化PDO类\n$pdo   = new PDO('mysql:host=127.0.0.1;port=3306;dbname=test;charset=utf8', 'user', 'password');\n$table = 'china';\n\n\/\/ 查询数据总条数\n$intTotal = 0;\n$strCount = 'SELECT COUNT(*) AS `total` FROM `' . $table . '` ' . $where;\n$stem     = $pdo->prepare($strCount);\nif ($stem->execute($bindParams)) {\n    $array    = $stem->fetch(PDO::FETCH_ASSOC);\n    $intTotal = (int)$array['total'];\n}\n\n\/\/ 查询具体数据\nif ($intTotal > 0) {\n    $strSql = 'SELECT * FROM `' . $table . '` ' . $where . ' ORDER BY `' . $field . '` ' . $sort . ' LIMIT '.$intStart.','.$intLength;\n    $stem   = $pdo->prepare($strSql);\n    if ($stem->execute($bindParams)) {\n        $data = $stem->fetchAll(PDO::FETCH_ASSOC);\n    }\n} else {\n    $data = [];\n}\n\n\/\/ 返回json数据\nheader('Content-Type: application\/json; charset=utf-8');\nexit(json_encode([\n    'draw'            => 0,\n    'data'            => [\n        'id'   => 1,\n        'name' => 'name'\n    ],\n    'recordsFiltered' => 99,\n    'recordsTotal'    => 99  \n], 320));\n\n```\n\n## 服务器返回数据说明\n\n### 查询返回`json`\n\n```json\n{\n    \"draw\": 1,                   \n    \"recordsFiltered\": 100,      \n    \"recordsTotal\": 100,         \n    \"data\": [                   \n      {\"id\": 1, \"name\": \"中国\"},\n      {\"id\": 2, \"name\": \"上海\"}\n    ]\n}\n```\n\n字段说明\n\n|字段名称|类型|说明信息|\n|:------|:------|:----|\n|`draw`|`int`|当次请求的唯一ID(jquery.datatables.js 会在请求中携带,接收返回即可)|\n|`recordsFiltered`|`int`|当次请求数据条数|\n|`recordsTotal`|`int`|数据总条数|\n|`data`|`array`|表格数据信息|\n\n### 新增、修改、删除返回`json`\n\n#### 处理成功\n\n```json\n{\n    \"code\": 0,\n    \"msg\": \"操作成功\",\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"中国\"\n    }\n}\n```\n\n#### 处理失败\n\n```json\n{\n    \"code\": 405,\n    \"msg\": \"处理失败\",\n    \"data\": null\n}\n```"
    },
    "msg": "ok"
}